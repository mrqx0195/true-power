buildscript {
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.2.0'
}

version = mod_version
group = mod_group_id

// Mixin
apply plugin: 'org.spongepowered.mixin'

base {
    archivesName = "${mod_file_name}-${minecraft_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Mixin
            arg "-mixin.config=truepower.mixins.json"
            property 'mixin.debug.export', 'true'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dir 'libs'
    }

    maven {
        name "KosmX's maven"
        url 'https://maven.kosmx.dev/'
    }

    maven {
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("maven.modrinth:slashblade-resharped:${slash_blade_version}")
    implementation fg.deobf("blank:mrqxs_Slashblade_Core-${minecraft_version}:${mrqx_slash_blade_core_version}")

    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:${player_animation_version}")

    // For in-game test
    runtimeOnly fg.deobf("blank:moonlight:1.20-2.13.83-forge")
    runtimeOnly fg.deobf("blank:dummmmmmy:1.20-2.0.6")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version                  : minecraft_version,
            minecraft_version_range            : minecraft_version_range,
            forge_version                      : forge_version,
            forge_version_range                : forge_version_range,
            loader_version_range               : loader_version_range,
            mod_id                             : mod_id,
            mod_name                           : mod_name,
            mod_license                        : mod_license,
            mod_version                        : mod_version,
            mod_authors                        : mod_authors,
            mod_description                    : mod_description,
            mod_file_name                      : mod_file_name,
            slash_blade_version                : slash_blade_version,
            slash_blade_version_range          : slash_blade_version_range,
            mrqx_slash_blade_core_version      : mrqx_slash_blade_core_version,
            mrqx_slash_blade_core_version_range: mrqx_slash_blade_core_version_range,
            player_animation_version           : player_animation_version,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

// Mixin
mixin {
    config 'truepower.mixins.json'

    debug.verbose = true
    debug.export = true
}
