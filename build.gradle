plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev.legacyforge' version '2.0.91'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories.clear()
repositories {
    // Mirror Maven
    maven {
        url = "https://neoforged.forgecdn.net/releases"
    }
    maven {
        url = "https://neoforged.forgecdn.net/mojang-meta"
    }

    maven {
        url = "https://maven.minecraftforge.net/"
    }
    maven {
        url = "https://libraries.minecraft.net/"
    }

    mavenLocal()

    maven {
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }

    maven {
        name "KosmX's maven"
        url 'https://maven.kosmx.dev/'
    }

    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    flatDir {
        dir 'libs'
    }
}

base {
    archivesName = "${mod_file_name}-${minecraft_version}"
}

legacyForge {
    version = project.minecraft_version + '-' + project.forge_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
            gameDirectory = project.file('run/client')
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            gameDirectory = project.file('run/server')
            programArgument '--nogui'
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            gameDirectory = project.file('run/gametest')
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            gameDirectory = project.file('run/data')
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG

            systemProperty 'forge.logging.console.level', 'debug'
            systemProperty 'mixin.debug.export', 'true'
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}
obfuscation {
    createRemappingConfiguration(configurations.localRuntime)
}

dependencies {
    modImplementation "maven.modrinth:slashblade-resharped:${slash_blade_version}"
    modImplementation "blank:mrqxs_Slashblade_Core-${minecraft_version}:${mrqx_slash_blade_core_version}"
    modImplementation "dev.kosmx.player-anim:player-animation-lib-forge:${player_animation_version}"

    modRuntimeOnly "maven.modrinth:moonlight:1.20-2.16.13-forge"
    modRuntimeOnly "maven.modrinth:mmmmmmmmmmmm:1.20-2.0.9"
    
    implementation "org.jetbrains:annotations:17.0.0"
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest.attributes([
            "MixinConfigs": "${mod_id}.mixins.json"
    ])
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version                  : minecraft_version,
            minecraft_version_range            : minecraft_version_range,
            forge_version                      : forge_version,
            forge_version_range                : forge_version_range,
            loader_version_range               : loader_version_range,
            mod_id                             : mod_id,
            mod_name                           : mod_name,
            mod_license                        : mod_license,
            mod_version                        : mod_version,
            mod_authors                        : mod_authors,
            mod_description                    : mod_description,
            mod_file_name                      : mod_file_name,
            slash_blade_version                : slash_blade_version,
            slash_blade_version_range          : slash_blade_version_range,
            mrqx_slash_blade_core_version      : mrqx_slash_blade_core_version,
            mrqx_slash_blade_core_version_range: mrqx_slash_blade_core_version_range,
            player_animation_version           : player_animation_version,
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
legacyForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

tasks.named('createMinecraftArtifacts') {
    dependsOn(tasks.named('generateModMetadata'))
}
